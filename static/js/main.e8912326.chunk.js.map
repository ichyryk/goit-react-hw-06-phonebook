{"version":3,"sources":["components/Container/Container.module.css","components/Container/Container.jsx","redux/contacts/contacts-actions.js","components/Form/Form.jsx","redux/contacts/contacts-selector.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","Container","children","className","styles","container","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","initialState","Form","useState","inputValue","setInputValue","dispatch","useDispatch","changeInput","e","currentTarget","value","form","onSubmit","preventDefault","contactsAction","type","pattern","title","required","placeholder","onChange","getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","contact","includes","ContactListItem","onDeleteContact","onClick","ContactList","useSelector","map","Filter","s","label","input","actions","target","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","devs","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e8912326.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addContact = createAction('contacts/Add', (name, number) => {\n  return {\n    payload: {\n      id: uuidv4(),\n      name,\n      number,\n    },\n  };\n});\n\nexport const deleteContact = createAction('contacts/Delete');\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport styles from './Form.module.css';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nconst Form = () => {\n  const [inputValue, setInputValue] = useState(initialState);\n  const { name, number } = inputValue;\n  const dispatch = useDispatch();\n\n  const changeInput = e => {\n    const { name, value } = e.currentTarget;\n    setInputValue({ ...inputValue, [name]: value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsAction.addContact(name, number));\n    setInputValue(initialState);\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Enter your name\"\n          onChange={changeInput}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          placeholder=\"Enter your number\"\n          onChange={changeInput}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default Form;\n","export const getFilter = state => state.contacts.filter;\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li>\n      <p>{name}:</p>\n      <p>{number}</p>\n      <button type=\"button\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as contactsAction from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selector';\nimport ContactListItem from '../ContactListItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(contactsAction.deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          onDeleteContact={onDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport s from '../Form/Form.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selector';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={value}\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\n        required\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import Container from './components/Container/Container';\nimport Form from './components/Form';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nfunction App() {\n  return (\n    <Container>\n      <h2>Phonebook</h2>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './contacts-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nconst devs = {\n  store,\n  persistor,\n};\n\nexport default devs;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2TM1N\"};"],"sourceRoot":""}